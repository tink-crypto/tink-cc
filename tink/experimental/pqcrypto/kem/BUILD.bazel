# package containing hybrid encryption implementations of PQC primitives

package(default_visibility = ["//:__subpackages__"])

licenses(["notice"])

cc_library(
    name = "ml_kem_parameters",
    srcs = ["ml_kem_parameters.cc"],
    hdrs = ["ml_kem_parameters.h"],
    include_prefix = "tink/experimental/pqcrypto/kem",
    deps = [
        "//tink:parameters",
        "//tink/experimental/kem:kem_parameters",
        "//tink/util:status",
        "//tink/util:statusor",
        "@com_google_absl//absl/status",
    ],
)

cc_library(
    name = "ml_kem_private_key",
    srcs = ["ml_kem_private_key.cc"],
    hdrs = ["ml_kem_private_key.h"],
    include_prefix = "tink/experimental/pqcrypto/kem",
    deps = [
        ":ml_kem_public_key",
        "//tink:insecure_secret_key_access",
        "//tink:key",
        "//tink:partial_key_access_token",
        "//tink:restricted_data",
        "//tink/experimental/kem:kem_private_key",
        "//tink/util:secret_data",
        "//tink/util:status",
        "//tink/util:statusor",
        "@boringssl//:crypto",
        "@com_google_absl//absl/base:core_headers",
        "@com_google_absl//absl/memory",
        "@com_google_absl//absl/status",
        "@com_google_absl//absl/status:statusor",
        "@com_google_absl//absl/strings",
        "@com_google_absl//absl/strings:string_view",
    ],
)

cc_library(
    name = "ml_kem_public_key",
    srcs = ["ml_kem_public_key.cc"],
    hdrs = ["ml_kem_public_key.h"],
    include_prefix = "tink/experimental/pqcrypto/kem",
    deps = [
        ":ml_kem_parameters",
        "//tink:key",
        "//tink:partial_key_access_token",
        "//tink/experimental/kem:kem_public_key",
        "//tink/internal:output_prefix_util",
        "//tink/util:status",
        "//tink/util:statusor",
        "@boringssl//:crypto",
        "@com_google_absl//absl/base:core_headers",
        "@com_google_absl//absl/status",
        "@com_google_absl//absl/status:statusor",
        "@com_google_absl//absl/strings",
        "@com_google_absl//absl/strings:string_view",
        "@com_google_absl//absl/types:optional",
    ],
)

cc_test(
    name = "ml_kem_parameters_test",
    srcs = ["ml_kem_parameters_test.cc"],
    deps = [
        ":ml_kem_parameters",
        "//tink:parameters",
        "//tink/util:statusor",
        "//tink/util:test_matchers",
        "@com_google_absl//absl/status",
        "@googletest//:gtest_main",
    ],
)

cc_test(
    name = "ml_kem_private_key_test",
    srcs = ["ml_kem_private_key_test.cc"],
    deps = [
        ":ml_kem_parameters",
        ":ml_kem_private_key",
        ":ml_kem_public_key",
        "//tink:insecure_secret_key_access",
        "//tink:key",
        "//tink:partial_key_access",
        "//tink:restricted_data",
        "//tink/internal:secret_buffer",
        "//tink/util:secret_data",
        "//tink/util:statusor",
        "//tink/util:test_matchers",
        "@boringssl//:crypto",
        "@com_google_absl//absl/status",
        "@com_google_absl//absl/strings",
        "@com_google_absl//absl/types:optional",
        "@googletest//:gtest_main",
    ],
)

cc_test(
    name = "ml_kem_public_key_test",
    srcs = ["ml_kem_public_key_test.cc"],
    deps = [
        ":ml_kem_parameters",
        ":ml_kem_public_key",
        "//tink:key",
        "//tink:partial_key_access",
        "//tink/util:secret_data",
        "//tink/util:statusor",
        "//tink/util:test_matchers",
        "@boringssl//:crypto",
        "@com_google_absl//absl/status",
        "@com_google_absl//absl/strings",
        "@com_google_absl//absl/types:optional",
        "@googletest//:gtest_main",
    ],
)

cc_library(
    name = "ml_kem_proto_serialization",
    srcs = ["ml_kem_proto_serialization.cc"],
    hdrs = ["ml_kem_proto_serialization.h"],
    include_prefix = "tink/experimental/pqcrypto/kem",
    deps = [
        ":ml_kem_parameters",
        ":ml_kem_private_key",
        ":ml_kem_public_key",
        "//tink:insecure_secret_key_access",
        "//tink:partial_key_access",
        "//tink:restricted_data",
        "//tink:secret_key_access_token",
        "//tink/internal:key_parser",
        "//tink/internal:key_serializer",
        "//tink/internal:mutable_serialization_registry",
        "//tink/internal:parameters_parser",
        "//tink/internal:parameters_serializer",
        "//tink/internal:proto_key_serialization",
        "//tink/internal:proto_parameters_serialization",
        "//tink/internal:proto_parser",
        "//tink/internal:tink_proto_structs",
        "//tink/util:secret_data",
        "//tink/util:status",
        "@com_google_absl//absl/base:no_destructor",
        "@com_google_absl//absl/status",
        "@com_google_absl//absl/status:statusor",
        "@com_google_absl//absl/strings:string_view",
        "@com_google_absl//absl/types:optional",
    ],
)

cc_test(
    name = "ml_kem_proto_serialization_test",
    srcs = ["ml_kem_proto_serialization_test.cc"],
    deps = [
        ":ml_kem_parameters",
        ":ml_kem_private_key",
        ":ml_kem_proto_serialization",
        ":ml_kem_public_key",
        "//proto/experimental/pqcrypto:ml_kem_cc_proto",
        "//tink:insecure_secret_key_access_testonly",
        "//tink:key",
        "//tink:parameters",
        "//tink:partial_key_access",
        "//tink:restricted_data",
        "//tink:secret_key_access_token",
        "//tink/experimental/pqcrypto/kem/internal:ml_kem_test_util",
        "//tink/internal:mutable_serialization_registry",
        "//tink/internal:proto_key_serialization",
        "//tink/internal:proto_parameters_serialization",
        "//tink/internal:serialization",
        "//tink/internal:tink_proto_structs",
        "//tink/util:test_matchers",
        "//tink/util:test_util",
        "@com_google_absl//absl/log:check",
        "@com_google_absl//absl/status",
        "@com_google_absl//absl/strings:string_view",
        "@com_google_absl//absl/types:optional",
        "@googletest//:gtest_main",
    ],
)
