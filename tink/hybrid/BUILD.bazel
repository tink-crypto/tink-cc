package(default_visibility = ["//:__subpackages__"])

licenses(["notice"])

cc_library(
    name = "hybrid_config",
    srcs = ["hybrid_config.cc"],
    hdrs = ["hybrid_config.h"],
    include_prefix = "tink/hybrid",
    visibility = ["//visibility:public"],
    deps = [
        ":ecies_aead_hkdf_private_key_manager",
        ":ecies_aead_hkdf_public_key_manager",
        ":ecies_proto_serialization",
        ":hybrid_decrypt_wrapper",
        ":hybrid_encrypt_wrapper",
        "//proto:config_cc_proto",
        "//tink:registry",
        "//tink/aead:aead_config",
        "//tink/config:tink_fips",
        "//tink/util:status",
        "@com_google_absl//absl/base:core_headers",
        "@com_google_absl//absl/memory",
    ],
)

cc_library(
    name = "hpke_config",
    srcs = ["hpke_config.cc"],
    hdrs = ["hpke_config.h"],
    include_prefix = "tink/hybrid",
    tags = ["requires_boringcrypto_update"],
    visibility = ["//visibility:public"],
    deps = [
        ":hpke_proto_serialization",
        ":hybrid_decrypt_wrapper",
        ":hybrid_encrypt_wrapper",
        "//tink:registry",
        "//tink/aead:aead_config",
        "//tink/config:tink_fips",
        "//tink/hybrid/internal:hpke_private_key_manager",
        "//tink/hybrid/internal:hpke_public_key_manager",
        "//tink/util:status",
        "@com_google_absl//absl/memory",
    ],
)

cc_library(
    name = "hybrid_decrypt_wrapper",
    srcs = ["hybrid_decrypt_wrapper.cc"],
    hdrs = ["hybrid_decrypt_wrapper.h"],
    include_prefix = "tink/hybrid",
    visibility = ["//visibility:public"],
    deps = [
        "//proto:tink_cc_proto",
        "//tink:crypto_format",
        "//tink:hybrid_decrypt",
        "//tink:primitive_set",
        "//tink:primitive_wrapper",
        "//tink/internal:monitoring",
        "//tink/internal:monitoring_util",
        "//tink/internal:registry_impl",
        "//tink/internal:util",
        "//tink/util:status",
        "//tink/util:statusor",
        "@com_google_absl//absl/memory",
        "@com_google_absl//absl/status",
        "@com_google_absl//absl/strings",
    ],
)

cc_library(
    name = "hybrid_encrypt_wrapper",
    srcs = ["hybrid_encrypt_wrapper.cc"],
    hdrs = ["hybrid_encrypt_wrapper.h"],
    include_prefix = "tink/hybrid",
    visibility = ["//visibility:public"],
    deps = [
        "//proto:tink_cc_proto",
        "//tink:crypto_format",
        "//tink:hybrid_encrypt",
        "//tink:primitive_set",
        "//tink:primitive_wrapper",
        "//tink/internal:monitoring",
        "//tink/internal:monitoring_util",
        "//tink/internal:registry_impl",
        "//tink/internal:util",
        "//tink/util:status",
        "//tink/util:statusor",
        "@com_google_absl//absl/memory",
        "@com_google_absl//absl/status",
        "@com_google_absl//absl/strings",
    ],
)

cc_library(
    name = "hybrid_decrypt_factory",
    srcs = ["hybrid_decrypt_factory.cc"],
    hdrs = ["hybrid_decrypt_factory.h"],
    include_prefix = "tink/hybrid",
    deps = [
        ":hybrid_decrypt_wrapper",
        "//tink:hybrid_decrypt",
        "//tink:key_manager",
        "//tink:keyset_handle",
        "//tink:registry",
        "//tink/util:status",
        "//tink/util:statusor",
        "@com_google_absl//absl/base:core_headers",
    ],
)

cc_library(
    name = "hybrid_encrypt_factory",
    srcs = ["hybrid_encrypt_factory.cc"],
    hdrs = ["hybrid_encrypt_factory.h"],
    include_prefix = "tink/hybrid",
    deps = [
        ":hybrid_encrypt_wrapper",
        "//tink:hybrid_encrypt",
        "//tink:key_manager",
        "//tink:keyset_handle",
        "//tink:registry",
        "//tink/util:status",
        "//tink/util:statusor",
        "@com_google_absl//absl/base:core_headers",
    ],
)

cc_library(
    name = "hybrid_key_templates",
    srcs = ["hybrid_key_templates.cc"],
    hdrs = ["hybrid_key_templates.h"],
    include_prefix = "tink/hybrid",
    visibility = ["//visibility:public"],
    deps = [
        "//proto:common_cc_proto",
        "//proto:ecies_aead_hkdf_cc_proto",
        "//proto:hpke_cc_proto",
        "//proto:tink_cc_proto",
        "//tink/aead:aead_key_templates",
        "//tink/daead:deterministic_aead_key_templates",
        "@com_google_absl//absl/strings",
    ],
)

cc_library(
    name = "ecies_aead_hkdf_hybrid_decrypt",
    srcs = ["ecies_aead_hkdf_hybrid_decrypt.cc"],
    hdrs = ["ecies_aead_hkdf_hybrid_decrypt.h"],
    include_prefix = "tink/hybrid",
    visibility = ["//visibility:private"],
    deps = [
        "//proto:ecies_aead_hkdf_cc_proto",
        "//tink:hybrid_decrypt",
        "//tink/hybrid/internal:ecies_aead_hkdf_dem_helper",
        "//tink/internal:ec_util",
        "//tink/subtle:ecies_hkdf_recipient_kem_boringssl",
        "//tink/util:enums",
        "//tink/util:secret_data",
        "//tink/util:status",
        "//tink/util:statusor",
        "@com_google_absl//absl/memory",
        "@com_google_absl//absl/status",
        "@com_google_absl//absl/strings:string_view",
    ],
)

cc_library(
    name = "ecies_aead_hkdf_hybrid_encrypt",
    srcs = ["ecies_aead_hkdf_hybrid_encrypt.cc"],
    hdrs = ["ecies_aead_hkdf_hybrid_encrypt.h"],
    include_prefix = "tink/hybrid",
    visibility = ["//visibility:private"],
    deps = [
        "//proto:ecies_aead_hkdf_cc_proto",
        "//tink:aead",
        "//tink:hybrid_encrypt",
        "//tink/hybrid/internal:ecies_aead_hkdf_dem_helper",
        "//tink/subtle:ecies_hkdf_sender_kem_boringssl",
        "//tink/util:enums",
        "//tink/util:status",
        "//tink/util:statusor",
        "@com_google_absl//absl/memory",
        "@com_google_absl//absl/status",
        "@com_google_absl//absl/strings",
    ],
)

cc_library(
    name = "ecies_aead_hkdf_private_key_manager",
    srcs = ["ecies_aead_hkdf_private_key_manager.cc"],
    hdrs = ["ecies_aead_hkdf_private_key_manager.h"],
    include_prefix = "tink/hybrid",
    deps = [
        ":ecies_aead_hkdf_hybrid_decrypt",
        ":ecies_aead_hkdf_public_key_manager",
        "//proto:ecies_aead_hkdf_cc_proto",
        "//proto:tink_cc_proto",
        "//tink:core/key_type_manager",
        "//tink:core/private_key_type_manager",
        "//tink:core/template_util",
        "//tink:hybrid_decrypt",
        "//tink:key_manager",
        "//tink/internal:ec_util",
        "//tink/util:constants",
        "//tink/util:enums",
        "//tink/util:errors",
        "//tink/util:protobuf_helper",
        "//tink/util:secret_data",
        "//tink/util:status",
        "//tink/util:statusor",
        "//tink/util:validation",
        "@com_google_absl//absl/memory",
        "@com_google_absl//absl/status",
        "@com_google_absl//absl/status:statusor",
        "@com_google_absl//absl/strings",
    ],
)

cc_library(
    name = "ecies_aead_hkdf_public_key_manager",
    srcs = ["ecies_aead_hkdf_public_key_manager.cc"],
    hdrs = ["ecies_aead_hkdf_public_key_manager.h"],
    include_prefix = "tink/hybrid",
    deps = [
        ":ecies_aead_hkdf_hybrid_encrypt",
        "//proto:common_cc_proto",
        "//proto:ecies_aead_hkdf_cc_proto",
        "//proto:tink_cc_proto",
        "//tink:core/key_type_manager",
        "//tink:core/template_util",
        "//tink:hybrid_encrypt",
        "//tink:key_manager",
        "//tink/util:constants",
        "//tink/util:errors",
        "//tink/util:protobuf_helper",
        "//tink/util:status",
        "//tink/util:statusor",
        "//tink/util:validation",
        "@com_google_absl//absl/memory",
        "@com_google_absl//absl/status",
        "@com_google_absl//absl/strings",
    ],
)

cc_library(
    name = "failing_hybrid",
    srcs = ["failing_hybrid.cc"],
    hdrs = ["failing_hybrid.h"],
    include_prefix = "tink/hybrid",
    deps = [
        "//tink:hybrid_decrypt",
        "//tink:hybrid_encrypt",
        "//tink/util:status",
        "//tink/util:statusor",
        "@com_google_absl//absl/memory",
        "@com_google_absl//absl/status",
        "@com_google_absl//absl/strings",
    ],
)

cc_library(
    name = "hybrid_parameters",
    hdrs = ["hybrid_parameters.h"],
    include_prefix = "tink/hybrid",
    visibility = ["//visibility:public"],
    deps = ["//tink:parameters"],
)

cc_library(
    name = "hybrid_public_key",
    hdrs = ["hybrid_public_key.h"],
    include_prefix = "tink/hybrid",
    visibility = ["//visibility:public"],
    deps = [
        ":hybrid_parameters",
        "//tink:key",
        "@com_google_absl//absl/strings",
    ],
)

cc_library(
    name = "hybrid_private_key",
    hdrs = ["hybrid_private_key.h"],
    include_prefix = "tink/hybrid",
    visibility = ["//visibility:public"],
    deps = [
        ":hybrid_parameters",
        ":hybrid_public_key",
        "//tink:key",
        "//tink:private_key",
        "@com_google_absl//absl/strings",
        "@com_google_absl//absl/types:optional",
    ],
)

cc_library(
    name = "hpke_parameters",
    srcs = ["hpke_parameters.cc"],
    hdrs = ["hpke_parameters.h"],
    include_prefix = "tink/hybrid",
    visibility = ["//visibility:public"],
    deps = [
        ":hybrid_parameters",
        "//tink:parameters",
        "@com_google_absl//absl/status",
        "@com_google_absl//absl/status:statusor",
    ],
)

cc_library(
    name = "hpke_public_key",
    srcs = ["hpke_public_key.cc"],
    hdrs = ["hpke_public_key.h"],
    include_prefix = "tink/hybrid",
    visibility = ["//visibility:public"],
    deps = [
        ":hpke_parameters",
        ":hybrid_public_key",
        "//tink:key",
        "//tink:partial_key_access_token",
        "//tink/internal:ec_util",
        "//tink/internal:output_prefix_util",
        "//tink/subtle:common_enums",
        "//tink/util:statusor",
        "@com_google_absl//absl/status",
        "@com_google_absl//absl/status:statusor",
        "@com_google_absl//absl/strings",
        "@com_google_absl//absl/strings:str_format",
        "@com_google_absl//absl/types:optional",
    ],
)

cc_library(
    name = "hpke_private_key",
    srcs = ["hpke_private_key.cc"],
    hdrs = ["hpke_private_key.h"],
    include_prefix = "tink/hybrid",
    tags = ["requires_boringcrypto_update"],
    visibility = ["//visibility:public"],
    deps = [
        ":hpke_parameters",
        ":hpke_public_key",
        ":hybrid_private_key",
        "//tink:insecure_secret_key_access",
        "//tink:key",
        "//tink:partial_key_access_token",
        "//tink:restricted_data",
        "//tink:secret_data",
        "//tink/internal:bn_util",
        "//tink/internal:call_with_core_dump_protection",
        "//tink/internal:ec_util",
        "//tink/internal:err_util",
        "//tink/internal:ssl_unique_ptr",
        "//tink/internal:xwing_util",
        "//tink/subtle:common_enums",
        "//tink/util:statusor",
        "@boringssl//:crypto",
        "@com_google_absl//absl/log",
        "@com_google_absl//absl/status",
        "@com_google_absl//absl/strings",
        "@com_google_absl//absl/strings:str_format",
    ],
)

cc_library(
    name = "hpke_proto_serialization",
    srcs = ["hpke_proto_serialization.cc"],
    hdrs = ["hpke_proto_serialization.h"],
    include_prefix = "tink/hybrid",
    tags = ["requires_boringcrypto_update"],
    deps = [
        ":hpke_parameters",
        ":hpke_private_key",
        ":hpke_public_key",
        "//tink:insecure_secret_key_access",
        "//tink:partial_key_access",
        "//tink:restricted_data",
        "//tink:secret_data",
        "//tink:secret_key_access_token",
        "//tink/internal:key_parser",
        "//tink/internal:key_serializer",
        "//tink/internal:mutable_serialization_registry",
        "//tink/internal:parameters_parser",
        "//tink/internal:parameters_serializer",
        "//tink/internal:proto_key_serialization",
        "//tink/internal:proto_parameters_serialization",
        "//tink/internal:proto_parser",
        "//tink/internal:tink_proto_structs",
        "//tink/util:secret_data",
        "@com_google_absl//absl/base:core_headers",
        "@com_google_absl//absl/status",
        "@com_google_absl//absl/status:statusor",
        "@com_google_absl//absl/strings",
        "@com_google_absl//absl/types:optional",
    ],
)

cc_library(
    name = "config_v0",
    srcs = ["config_v0.cc"],
    hdrs = ["config_v0.h"],
    include_prefix = "tink/hybrid",
    tags = ["requires_boringcrypto_update"],
    visibility = ["//visibility:public"],
    deps = [
        "//tink:configuration",
        "//tink/hybrid/internal:config_v0",
        "@com_google_absl//absl/log:check",
    ],
)

cc_library(
    name = "key_gen_config_v0",
    srcs = ["key_gen_config_v0.cc"],
    hdrs = ["key_gen_config_v0.h"],
    include_prefix = "tink/hybrid",
    tags = ["requires_boringcrypto_update"],
    visibility = ["//visibility:public"],
    deps = [
        "//tink:key_gen_configuration",
        "//tink/hybrid/internal:key_gen_config_v0",
        "@com_google_absl//absl/log:check",
    ],
)

cc_library(
    name = "ecies_parameters",
    srcs = ["ecies_parameters.cc"],
    hdrs = ["ecies_parameters.h"],
    include_prefix = "tink/hybrid",
    visibility = ["//visibility:public"],
    deps = [
        ":hybrid_parameters",
        "//tink:parameters",
        "//tink/aead:aes_ctr_hmac_aead_parameters",
        "//tink/aead:aes_gcm_parameters",
        "//tink/aead:xchacha20_poly1305_parameters",
        "//tink/daead:aes_siv_parameters",
        "//tink/util:status",
        "//tink/util:statusor",
        "@com_google_absl//absl/base:core_headers",
        "@com_google_absl//absl/status",
        "@com_google_absl//absl/strings",
        "@com_google_absl//absl/types:optional",
    ],
)

cc_library(
    name = "ecies_public_key",
    srcs = ["ecies_public_key.cc"],
    hdrs = ["ecies_public_key.h"],
    include_prefix = "tink/hybrid",
    visibility = ["//visibility:public"],
    deps = [
        ":ecies_parameters",
        ":hybrid_public_key",
        "//tink:ec_point",
        "//tink:key",
        "//tink:partial_key_access_token",
        "//tink/internal:ec_util",
        "//tink/internal:output_prefix_util",
        "//tink/internal:ssl_unique_ptr",
        "//tink/subtle:common_enums",
        "//tink/util:status",
        "//tink/util:statusor",
        "@boringssl//:crypto",
        "@com_google_absl//absl/status",
        "@com_google_absl//absl/strings",
        "@com_google_absl//absl/strings:str_format",
        "@com_google_absl//absl/types:optional",
    ],
)

cc_library(
    name = "ecies_private_key",
    srcs = ["ecies_private_key.cc"],
    hdrs = ["ecies_private_key.h"],
    include_prefix = "tink/hybrid",
    visibility = ["//visibility:public"],
    deps = [
        ":ecies_parameters",
        ":ecies_public_key",
        ":hybrid_private_key",
        "//tink:ec_point",
        "//tink:insecure_secret_key_access",
        "//tink:key",
        "//tink:partial_key_access_token",
        "//tink:restricted_big_integer",
        "//tink:restricted_data",
        "//tink/internal:bn_util",
        "//tink/internal:call_with_core_dump_protection",
        "//tink/internal:ec_util",
        "//tink/internal:err_util",
        "//tink/internal:ssl_unique_ptr",
        "//tink/subtle:common_enums",
        "//tink/util:secret_data",
        "//tink/util:status",
        "//tink/util:statusor",
        "@boringssl//:crypto",
        "@com_google_absl//absl/status",
        "@com_google_absl//absl/strings",
        "@com_google_absl//absl/strings:str_format",
        "@com_google_absl//absl/types:optional",
    ],
)

cc_library(
    name = "ecies_proto_serialization",
    srcs = ["ecies_proto_serialization.cc"],
    hdrs = ["ecies_proto_serialization.h"],
    include_prefix = "tink/hybrid",
    deps = [
        ":ecies_parameters",
        ":ecies_private_key",
        ":ecies_public_key",
        "//tink:big_integer",
        "//tink:ec_point",
        "//tink:insecure_secret_key_access",
        "//tink:partial_key_access",
        "//tink:restricted_big_integer",
        "//tink:restricted_data",
        "//tink:secret_data",
        "//tink:secret_key_access_token",
        "//tink/aead/internal:aes_ctr_hmac_proto_structs",
        "//tink/aead/internal:aes_gcm_proto_structs",
        "//tink/aead/internal:xchacha20_poly1305_proto_format",
        "//tink/daead/internal:aes_siv_proto_structs",
        "//tink/internal:bn_encoding_util",
        "//tink/internal:common_proto_enums",
        "//tink/internal:key_parser",
        "//tink/internal:key_serializer",
        "//tink/internal:mutable_serialization_registry",
        "//tink/internal:parameters_parser",
        "//tink/internal:parameters_serializer",
        "//tink/internal:proto_key_serialization",
        "//tink/internal:proto_parameters_serialization",
        "//tink/internal:proto_parser",
        "//tink/internal:tink_proto_structs",
        "//tink/mac/internal:hmac_proto_structs",
        "//tink/util:secret_data",
        "@boringssl//:crypto",
        "@com_google_absl//absl/base:core_headers",
        "@com_google_absl//absl/base:no_destructor",
        "@com_google_absl//absl/status",
        "@com_google_absl//absl/status:statusor",
        "@com_google_absl//absl/strings",
        "@com_google_absl//absl/strings:str_format",
        "@com_google_absl//absl/types:optional",
    ],
)

# tests

cc_test(
    name = "hybrid_config_test",
    size = "small",
    srcs = ["hybrid_config_test.cc"],
    tags = ["fips"],
    deps = [
        ":ecies_aead_hkdf_private_key_manager",
        ":ecies_aead_hkdf_public_key_manager",
        ":ecies_parameters",
        ":ecies_private_key",
        ":ecies_public_key",
        ":hybrid_config",
        ":hybrid_key_templates",
        "//proto:aes_gcm_cc_proto",
        "//proto:common_cc_proto",
        "//proto:ecies_aead_hkdf_cc_proto",
        "//proto:tink_cc_proto",
        "//tink:crypto_format",
        "//tink:hybrid_decrypt",
        "//tink:hybrid_encrypt",
        "//tink:insecure_secret_key_access",
        "//tink:key",
        "//tink:keyset_handle",
        "//tink:parameters",
        "//tink:partial_key_access",
        "//tink:primitive_set",
        "//tink:registry",
        "//tink:restricted_data",
        "//tink/config:global_registry",
        "//tink/internal:ec_util",
        "//tink/internal:fips_utils",
        "//tink/internal:mutable_serialization_registry",
        "//tink/internal:proto_key_serialization",
        "//tink/internal:proto_parameters_serialization",
        "//tink/internal:serialization",
        "//tink/internal:tink_proto_structs",
        "//tink/subtle:random",
        "//tink/util:secret_data",
        "//tink/util:test_matchers",
        "//tink/util:test_util",
        "@boringssl//:crypto",
        "@com_google_absl//absl/memory",
        "@com_google_absl//absl/status",
        "@com_google_absl//absl/status:statusor",
        "@com_google_absl//absl/strings",
        "@com_google_absl//absl/types:optional",
        "@com_google_googletest//:gtest_main",
    ],
)

cc_test(
    name = "hpke_config_test",
    size = "small",
    srcs = ["hpke_config_test.cc"],
    tags = ["requires_boringcrypto_update"],
    deps = [
        ":hpke_config",
        ":hpke_parameters",
        ":hpke_private_key",
        ":hpke_public_key",
        ":hybrid_key_templates",
        "//proto:hpke_cc_proto",
        "//proto:tink_cc_proto",
        "//tink:hybrid_decrypt",
        "//tink:hybrid_encrypt",
        "//tink:insecure_secret_key_access",
        "//tink:key",
        "//tink:keyset_handle",
        "//tink:parameters",
        "//tink:partial_key_access",
        "//tink:registry",
        "//tink:restricted_data",
        "//tink/config:global_registry",
        "//tink/config:tink_fips",
        "//tink/hybrid/internal:hpke_private_key_manager",
        "//tink/hybrid/internal:hpke_public_key_manager",
        "//tink/internal:ec_util",
        "//tink/internal:mutable_serialization_registry",
        "//tink/internal:proto_key_serialization",
        "//tink/internal:proto_parameters_serialization",
        "//tink/internal:serialization",
        "//tink/internal:tink_proto_structs",
        "//tink/subtle:random",
        "//tink/util:secret_data",
        "//tink/util:test_matchers",
        "@com_google_absl//absl/status",
        "@com_google_absl//absl/status:statusor",
        "@com_google_googletest//:gtest_main",
    ],
)

cc_test(
    name = "hybrid_decrypt_wrapper_test",
    size = "small",
    srcs = ["hybrid_decrypt_wrapper_test.cc"],
    deps = [
        ":failing_hybrid",
        ":hybrid_decrypt_wrapper",
        "//proto:tink_cc_proto",
        "//tink:hybrid_decrypt",
        "//tink:primitive_set",
        "//tink:registry",
        "//tink/internal:monitoring",
        "//tink/internal:monitoring_client_mocks",
        "//tink/internal:registry_impl",
        "//tink/util:status",
        "//tink/util:statusor",
        "//tink/util:test_matchers",
        "//tink/util:test_util",
        "@com_google_absl//absl/container:flat_hash_map",
        "@com_google_absl//absl/memory",
        "@com_google_absl//absl/status",
        "@com_google_absl//absl/strings",
        "@com_google_googletest//:gtest_main",
    ],
)

cc_test(
    name = "hybrid_encrypt_wrapper_test",
    size = "small",
    srcs = ["hybrid_encrypt_wrapper_test.cc"],
    deps = [
        ":failing_hybrid",
        ":hybrid_encrypt_wrapper",
        "//proto:tink_cc_proto",
        "//tink:hybrid_encrypt",
        "//tink:primitive_set",
        "//tink:registry",
        "//tink/internal:monitoring",
        "//tink/internal:monitoring_client_mocks",
        "//tink/internal:registry_impl",
        "//tink/util:status",
        "//tink/util:statusor",
        "//tink/util:test_matchers",
        "//tink/util:test_util",
        "@com_google_absl//absl/container:flat_hash_map",
        "@com_google_absl//absl/memory",
        "@com_google_absl//absl/status",
        "@com_google_absl//absl/strings:string_view",
        "@com_google_googletest//:gtest_main",
    ],
)

cc_test(
    name = "hybrid_decrypt_factory_test",
    size = "small",
    srcs = ["hybrid_decrypt_factory_test.cc"],
    deps = [
        ":ecies_aead_hkdf_public_key_manager",
        ":hybrid_config",
        ":hybrid_decrypt_factory",
        "//proto:ecies_aead_hkdf_cc_proto",
        "//proto:tink_cc_proto",
        "//tink:crypto_format",
        "//tink:hybrid_decrypt",
        "//tink:hybrid_encrypt",
        "//tink:keyset_handle",
        "//tink/util:status",
        "//tink/util:test_keyset_handle",
        "//tink/util:test_util",
        "@com_google_absl//absl/memory",
        "@com_google_googletest//:gtest_main",
    ],
)

cc_test(
    name = "hybrid_encrypt_factory_test",
    size = "small",
    srcs = ["hybrid_encrypt_factory_test.cc"],
    deps = [
        ":hybrid_config",
        ":hybrid_encrypt_factory",
        "//proto:ecies_aead_hkdf_cc_proto",
        "//proto:tink_cc_proto",
        "//tink:crypto_format",
        "//tink:hybrid_encrypt",
        "//tink:keyset_handle",
        "//tink/util:status",
        "//tink/util:test_keyset_handle",
        "//tink/util:test_util",
        "@com_google_googletest//:gtest_main",
    ],
)

cc_test(
    name = "hybrid_key_templates_test",
    size = "small",
    srcs = ["hybrid_key_templates_test.cc"],
    deps = [
        ":ecies_aead_hkdf_private_key_manager",
        ":hybrid_config",
        ":hybrid_key_templates",
        "//proto:common_cc_proto",
        "//proto:ecies_aead_hkdf_cc_proto",
        "//proto:hpke_cc_proto",
        "//proto:tink_cc_proto",
        "//tink/aead:aead_key_templates",
        "//tink/daead:deterministic_aead_key_templates",
        "//tink/hybrid/internal:hpke_private_key_manager",
        "//tink/util:test_matchers",
        "@com_google_googletest//:gtest_main",
    ],
)

cc_test(
    name = "ecies_aead_hkdf_hybrid_decrypt_test",
    size = "large",
    srcs = ["ecies_aead_hkdf_hybrid_decrypt_test.cc"],
    deps = [
        ":ecies_aead_hkdf_hybrid_decrypt",
        ":ecies_aead_hkdf_hybrid_encrypt",
        "//proto:aes_gcm_cc_proto",
        "//proto:common_cc_proto",
        "//proto:ecies_aead_hkdf_cc_proto",
        "//tink:hybrid_decrypt",
        "//tink:hybrid_encrypt",
        "//tink:registry",
        "//tink/aead:aes_ctr_hmac_aead_key_manager",
        "//tink/aead:aes_gcm_key_manager",
        "//tink/aead:xchacha20_poly1305_key_manager",
        "//tink/daead:aes_siv_key_manager",
        "//tink/internal:ec_util",
        "//tink/internal:ssl_util",
        "//tink/subtle:random",
        "//tink/util:enums",
        "//tink/util:statusor",
        "//tink/util:test_matchers",
        "//tink/util:test_util",
        "@com_google_absl//absl/memory",
        "@com_google_absl//absl/status",
        "@com_google_absl//absl/strings:string_view",
        "@com_google_googletest//:gtest_main",
    ],
)

cc_test(
    name = "ecies_aead_hkdf_hybrid_encrypt_test",
    size = "small",
    srcs = ["ecies_aead_hkdf_hybrid_encrypt_test.cc"],
    deps = [
        ":ecies_aead_hkdf_hybrid_encrypt",
        "//proto:common_cc_proto",
        "//proto:ecies_aead_hkdf_cc_proto",
        "//tink:hybrid_encrypt",
        "//tink/aead:aes_gcm_key_manager",
        "//tink/internal:ec_util",
        "//tink/util:enums",
        "//tink/util:statusor",
        "//tink/util:test_util",
        "@com_google_absl//absl/memory",
        "@com_google_absl//absl/status",
        "@com_google_googletest//:gtest_main",
    ],
)

cc_test(
    name = "ecies_aead_hkdf_private_key_manager_test",
    size = "small",
    srcs = ["ecies_aead_hkdf_private_key_manager_test.cc"],
    deps = [
        ":ecies_aead_hkdf_hybrid_encrypt",
        ":ecies_aead_hkdf_private_key_manager",
        ":ecies_aead_hkdf_public_key_manager",
        ":hybrid_config",
        ":hybrid_key_templates",
        "//proto:aes_eax_cc_proto",
        "//proto:common_cc_proto",
        "//proto:ecies_aead_hkdf_cc_proto",
        "//proto:tink_cc_proto",
        "//tink:hybrid_decrypt",
        "//tink:hybrid_encrypt",
        "//tink:key_status",
        "//tink:keyset_handle",
        "//tink:registry",
        "//tink/aead:aead_key_templates",
        "//tink/aead:aes_ctr_hmac_aead_key_manager",
        "//tink/aead:aes_gcm_key_manager",
        "//tink/config:global_registry",
        "//tink/hybrid/internal/testing:ecies_aead_hkdf_test_vectors",
        "//tink/hybrid/internal/testing:hybrid_test_vectors",
        "//tink/subtle:hybrid_test_util",
        "//tink/util:status",
        "//tink/util:statusor",
        "//tink/util:test_matchers",
        "//tink/util:test_util",
        "@com_google_absl//absl/memory",
        "@com_google_absl//absl/status",
        "@com_google_absl//absl/strings",
        "@com_google_googletest//:gtest_main",
    ],
)

cc_test(
    name = "ecies_aead_hkdf_public_key_manager_test",
    size = "small",
    srcs = ["ecies_aead_hkdf_public_key_manager_test.cc"],
    deps = [
        ":ecies_aead_hkdf_private_key_manager",
        ":ecies_aead_hkdf_public_key_manager",
        "//proto:aes_eax_cc_proto",
        "//proto:common_cc_proto",
        "//proto:ecies_aead_hkdf_cc_proto",
        "//proto:tink_cc_proto",
        "//tink:hybrid_encrypt",
        "//tink:registry",
        "//tink/aead:aead_key_templates",
        "//tink/aead:aes_gcm_key_manager",
        "//tink/util:status",
        "//tink/util:statusor",
        "//tink/util:test_matchers",
        "//tink/util:test_util",
        "@com_google_absl//absl/status",
        "@com_google_googletest//:gtest_main",
    ],
)

cc_test(
    name = "failing_hybrid_test",
    srcs = ["failing_hybrid_test.cc"],
    deps = [
        ":failing_hybrid",
        "//tink:hybrid_decrypt",
        "//tink:hybrid_encrypt",
        "//tink/util:test_matchers",
        "@com_google_absl//absl/status",
        "@com_google_googletest//:gtest_main",
    ],
)

cc_test(
    name = "hpke_parameters_test",
    srcs = ["hpke_parameters_test.cc"],
    deps = [
        ":hpke_parameters",
        "//tink:parameters",
        "//tink/util:test_matchers",
        "@com_google_absl//absl/status",
        "@com_google_absl//absl/status:statusor",
        "@com_google_googletest//:gtest_main",
    ],
)

cc_test(
    name = "hpke_public_key_test",
    srcs = ["hpke_public_key_test.cc"],
    deps = [
        ":hpke_parameters",
        ":hpke_public_key",
        "//tink:key",
        "//tink:partial_key_access",
        "//tink/internal:ec_util",
        "//tink/internal:ssl_unique_ptr",
        "//tink/subtle:common_enums",
        "//tink/subtle:random",
        "//tink/util:test_matchers",
        "//tink/util:test_util",
        "@boringssl//:crypto",
        "@com_google_absl//absl/status",
        "@com_google_absl//absl/status:statusor",
        "@com_google_absl//absl/types:optional",
        "@com_google_googletest//:gtest_main",
    ],
)

cc_test(
    name = "hpke_private_key_test",
    srcs = ["hpke_private_key_test.cc"],
    tags = ["requires_boringcrypto_update"],
    deps = [
        ":hpke_parameters",
        ":hpke_private_key",
        ":hpke_public_key",
        "//tink:insecure_secret_key_access",
        "//tink:key",
        "//tink:partial_key_access",
        "//tink:restricted_data",
        "//tink/internal:ec_util",
        "//tink/internal:secret_buffer",
        "//tink/internal:ssl_unique_ptr",
        "//tink/internal:xwing_util",
        "//tink/subtle:common_enums",
        "//tink/subtle:random",
        "//tink/util:secret_data",
        "//tink/util:test_matchers",
        "//tink/util:test_util",
        "@boringssl//:crypto",
        "@com_google_absl//absl/status",
        "@com_google_absl//absl/status:statusor",
        "@com_google_absl//absl/strings",
        "@com_google_absl//absl/strings:string_view",
        "@com_google_absl//absl/types:optional",
        "@com_google_googletest//:gtest_main",
    ],
)

cc_test(
    name = "hpke_proto_serialization_test",
    srcs = ["hpke_proto_serialization_test.cc"],
    tags = ["requires_boringcrypto_update"],
    deps = [
        ":hpke_parameters",
        ":hpke_private_key",
        ":hpke_proto_serialization",
        ":hpke_public_key",
        "//proto:hpke_cc_proto",
        "//tink:insecure_secret_key_access",
        "//tink:key",
        "//tink:parameters",
        "//tink:partial_key_access",
        "//tink:restricted_data",
        "//tink:secret_data",
        "//tink/internal:ec_util",
        "//tink/internal:mutable_serialization_registry",
        "//tink/internal:proto_key_serialization",
        "//tink/internal:proto_parameters_serialization",
        "//tink/internal:serialization",
        "//tink/internal:ssl_unique_ptr",
        "//tink/internal:tink_proto_structs",
        "//tink/internal/testing:equals_proto_key_serialization",
        "//tink/internal/testing:field_with_number",
        "//tink/subtle:common_enums",
        "//tink/util:secret_data",
        "//tink/util:test_matchers",
        "//tink/util:test_util",
        "@boringssl//:crypto",
        "@com_google_absl//absl/log:check",
        "@com_google_absl//absl/status",
        "@com_google_absl//absl/strings",
        "@com_google_absl//absl/strings:string_view",
        "@com_google_absl//absl/types:optional",
        "@com_google_googletest//:gtest_main",
    ],
)

cc_test(
    name = "config_v0_test",
    srcs = ["config_v0_test.cc"],
    tags = ["requires_boringcrypto_update"],
    deps = [
        ":config_v0",
        ":hybrid_key_templates",
        ":key_gen_config_v0",
        "//proto:tink_cc_proto",
        "//tink:hybrid_decrypt",
        "//tink:hybrid_encrypt",
        "//tink:keyset_handle",
        "//tink/util:statusor",
        "//tink/util:test_matchers",
        "@com_google_googletest//:gtest_main",
    ],
)

cc_test(
    name = "ecies_parameters_test",
    srcs = ["ecies_parameters_test.cc"],
    deps = [
        ":ecies_parameters",
        "//tink:parameters",
        "//tink/aead:aes_ctr_hmac_aead_parameters",
        "//tink/aead:aes_gcm_parameters",
        "//tink/aead:xchacha20_poly1305_parameters",
        "//tink/daead:aes_siv_parameters",
        "//tink/util:statusor",
        "//tink/util:test_matchers",
        "//tink/util:test_util",
        "@com_google_absl//absl/status",
        "@com_google_absl//absl/strings:string_view",
        "@com_google_absl//absl/types:optional",
        "@com_google_googletest//:gtest_main",
    ],
)

cc_test(
    name = "ecies_public_key_test",
    srcs = ["ecies_public_key_test.cc"],
    deps = [
        ":ecies_parameters",
        ":ecies_public_key",
        "//tink:big_integer",
        "//tink:ec_point",
        "//tink:key",
        "//tink:partial_key_access",
        "//tink/internal:ec_util",
        "//tink/subtle:common_enums",
        "//tink/subtle:random",
        "//tink/util:statusor",
        "//tink/util:test_matchers",
        "//tink/util:test_util",
        "@boringssl//:crypto",
        "@com_google_absl//absl/status",
        "@com_google_absl//absl/types:optional",
        "@com_google_googletest//:gtest_main",
    ],
)

cc_test(
    name = "ecies_private_key_test",
    srcs = ["ecies_private_key_test.cc"],
    deps = [
        ":ecies_parameters",
        ":ecies_private_key",
        ":ecies_public_key",
        "//tink:big_integer",
        "//tink:ec_point",
        "//tink:insecure_secret_key_access",
        "//tink:key",
        "//tink:partial_key_access",
        "//tink:restricted_big_integer",
        "//tink:restricted_data",
        "//tink/internal:ec_util",
        "//tink/subtle:common_enums",
        "//tink/subtle:random",
        "//tink/util:secret_data",
        "//tink/util:statusor",
        "//tink/util:test_matchers",
        "//tink/util:test_util",
        "@boringssl//:crypto",
        "@com_google_absl//absl/status",
        "@com_google_absl//absl/strings",
        "@com_google_absl//absl/strings:string_view",
        "@com_google_absl//absl/types:optional",
        "@com_google_googletest//:gtest_main",
    ],
)

cc_test(
    name = "ecies_proto_serialization_test",
    srcs = ["ecies_proto_serialization_test.cc"],
    deps = [
        ":ecies_parameters",
        ":ecies_private_key",
        ":ecies_proto_serialization",
        ":ecies_public_key",
        "//proto:aes_ctr_cc_proto",
        "//proto:aes_ctr_hmac_aead_cc_proto",
        "//proto:aes_gcm_cc_proto",
        "//proto:aes_siv_cc_proto",
        "//proto:common_cc_proto",
        "//proto:ecies_aead_hkdf_cc_proto",
        "//proto:hmac_cc_proto",
        "//proto:tink_cc_proto",
        "//proto:xchacha20_poly1305_cc_proto",
        "//tink:big_integer",
        "//tink:ec_point",
        "//tink:insecure_secret_key_access",
        "//tink:key",
        "//tink:parameters",
        "//tink:partial_key_access",
        "//tink:restricted_big_integer",
        "//tink:restricted_data",
        "//tink/aead/internal:aes_ctr_hmac_proto_structs",
        "//tink/internal:common_proto_enums",
        "//tink/internal:ec_util",
        "//tink/internal:mutable_serialization_registry",
        "//tink/internal:proto_key_serialization",
        "//tink/internal:proto_parameters_serialization",
        "//tink/internal:serialization",
        "//tink/internal:tink_proto_structs",
        "//tink/subtle:common_enums",
        "//tink/util:enums",
        "//tink/util:secret_data",
        "//tink/util:test_matchers",
        "@boringssl//:crypto",
        "@com_google_absl//absl/log:check",
        "@com_google_absl//absl/status",
        "@com_google_absl//absl/status:statusor",
        "@com_google_absl//absl/strings",
        "@com_google_absl//absl/strings:string_view",
        "@com_google_absl//absl/types:optional",
        "@com_google_googletest//:gtest_main",
    ],
)
