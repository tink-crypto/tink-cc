load("//:template_rule.bzl", "template_rule")
load("//:version.bzl", "TINK_VERSION_LABEL")

package(default_visibility = ["//:__subpackages__"])

licenses(["notice"])

# public libraries

alias(
    name = "secret_key_access_testonly",
    testonly = 1,
    actual = ":secret_key_access",
    visibility = ["//visibility:public"],
)

alias(
    name = "cleartext_keyset_handle_testonly",
    testonly = 1,
    actual = ":cleartext_keyset_handle",
    visibility = ["//visibility:public"],
)

alias(
    name = "insecure_secret_key_access_testonly",
    testonly = 1,
    actual = ":insecure_secret_key_access",
    visibility = ["//visibility:public"],
)

cc_library(
    name = "tink_cc",
    hdrs = [
        "aead.h",
        "aead_config.h",
        "aead_factory.h",
        "aead_key_templates.h",
        "binary_keyset_reader.h",
        "binary_keyset_writer.h",
        "deterministic_aead.h",
        "deterministic_aead_config.h",
        "deterministic_aead_factory.h",
        "deterministic_aead_key_templates.h",
        "hybrid_config.h",
        "hybrid_decrypt.h",
        "hybrid_decrypt_factory.h",
        "hybrid_encrypt.h",
        "hybrid_encrypt_factory.h",
        "hybrid_key_templates.h",
        "input_stream.h",
        "json_keyset_reader.h",
        "json_keyset_writer.h",
        "key_manager.h",
        "keyset_handle.h",
        "keyset_manager.h",
        "keyset_reader.h",
        "keyset_writer.h",
        "kms_client.h",
        "mac.h",
        "mac_config.h",
        "mac_factory.h",
        "mac_key_templates.h",
        "output_stream.h",
        "output_stream_with_result.h",
        "public_key_sign.h",
        "public_key_sign_factory.h",
        "public_key_verify.h",
        "public_key_verify_factory.h",
        "random_access_stream.h",
        "registry.h",
        "signature_config.h",
        "signature_key_templates.h",
        "streaming_aead.h",
        "streaming_aead_config.h",
        "streaming_aead_key_templates.h",
        "streaming_mac.h",
        "tink_config.h",
        "version.h",
    ],
    include_prefix = "tink",
    visibility = ["//visibility:public"],
    deps = [
        ":aead",
        ":binary_keyset_reader",
        ":binary_keyset_writer",
        ":deterministic_aead",
        ":hybrid_decrypt",
        ":hybrid_encrypt",
        ":input_stream",
        ":json_keyset_reader",
        ":json_keyset_writer",
        ":key",
        ":key_manager",
        ":keyset_handle",
        ":keyset_manager",
        ":keyset_reader",
        ":keyset_writer",
        ":kms_client",
        ":mac",
        ":output_stream",
        ":output_stream_with_result",
        ":parameters",
        ":primitive_set",
        ":public_key_sign",
        ":public_key_verify",
        ":random_access_stream",
        ":registry",
        ":streaming_aead",
        ":streaming_mac",
        ":version",
        "//proto:config_cc_proto",
        "//proto:tink_cc_proto",
        "//tink/aead:aead_config",
        "//tink/aead:aead_factory",
        "//tink/aead:aead_key_templates",
        "//tink/config:tink_config",
        "//tink/daead:deterministic_aead_config",
        "//tink/daead:deterministic_aead_factory",
        "//tink/daead:deterministic_aead_key_templates",
        "//tink/hybrid:hybrid_config",
        "//tink/hybrid:hybrid_decrypt_factory",
        "//tink/hybrid:hybrid_encrypt_factory",
        "//tink/hybrid:hybrid_key_templates",
        "//tink/internal:key_info",
        "//tink/internal:keyset_handle_builder_entry",
        "//tink/internal:registry_impl",
        "//tink/mac:mac_config",
        "//tink/mac:mac_factory",
        "//tink/mac:mac_key_templates",
        "//tink/signature:public_key_sign_factory",
        "//tink/signature:public_key_verify_factory",
        "//tink/signature:signature_config",
        "//tink/signature:signature_key_templates",
        "//tink/streamingaead:streaming_aead_config",
        "//tink/streamingaead:streaming_aead_key_templates",
        "//tink/util:buffer",
        "//tink/util:errors",
        "//tink/util:protobuf_helper",
        "//tink/util:secret_proto",
        "//tink/util:status",
        "//tink/util:statusor",
        "//tink/util:validation",
        "@com_google_absl//absl/base:core_headers",
        "@com_google_absl//absl/container:flat_hash_map",
        "@com_google_absl//absl/memory",
        "@com_google_absl//absl/status",
        "@com_google_absl//absl/strings",
        "@com_google_absl//absl/synchronization",
        "@com_google_absl//absl/types:optional",
    ],
)

cc_library(
    name = "input_stream",
    hdrs = ["input_stream.h"],
    include_prefix = "tink",
    visibility = ["//visibility:public"],
    deps = [
        "@com_google_absl//absl/status",
        "@com_google_absl//absl/status:statusor",
    ],
)

cc_library(
    name = "output_stream",
    hdrs = ["output_stream.h"],
    include_prefix = "tink",
    visibility = ["//visibility:public"],
    deps = [
        "@com_google_absl//absl/status",
        "@com_google_absl//absl/status:statusor",
    ],
)

cc_library(
    name = "random_access_stream",
    hdrs = ["random_access_stream.h"],
    include_prefix = "tink",
    visibility = ["//visibility:public"],
    deps = [
        "//tink/util:buffer",
        "//tink/util:status",
        "//tink/util:statusor",
    ],
)

cc_library(
    name = "output_stream_with_result",
    hdrs = ["output_stream_with_result.h"],
    include_prefix = "tink",
    visibility = ["//visibility:public"],
    deps = [
        ":output_stream",
        "@com_google_absl//absl/status",
        "@com_google_absl//absl/status:statusor",
    ],
)

cc_library(
    name = "aead",
    hdrs = ["aead.h"],
    include_prefix = "tink",
    visibility = ["//visibility:public"],
    deps = [
        "@com_google_absl//absl/status:statusor",
        "@com_google_absl//absl/strings",
    ],
)

cc_library(
    name = "deterministic_aead",
    hdrs = ["deterministic_aead.h"],
    include_prefix = "tink",
    visibility = ["//visibility:public"],
    deps = [
        "@com_google_absl//absl/status",
        "@com_google_absl//absl/status:statusor",
        "@com_google_absl//absl/strings",
    ],
)

cc_library(
    name = "streaming_aead",
    hdrs = ["streaming_aead.h"],
    include_prefix = "tink",
    visibility = ["//visibility:public"],
    deps = [
        ":input_stream",
        ":output_stream",
        ":random_access_stream",
        "@com_google_absl//absl/status:statusor",
        "@com_google_absl//absl/strings",
    ],
)

cc_library(
    name = "streaming_mac",
    hdrs = ["streaming_mac.h"],
    include_prefix = "tink",
    visibility = ["//visibility:public"],
    deps = [
        ":output_stream_with_result",
        "@com_google_absl//absl/status",
        "@com_google_absl//absl/status:statusor",
        "@com_google_absl//absl/strings",
    ],
)

cc_library(
    name = "chunked_mac",
    hdrs = ["chunked_mac.h"],
    include_prefix = "tink",
    visibility = ["//visibility:public"],
    deps = [
        "//tink/util:status",
        "//tink/util:statusor",
        "@com_google_absl//absl/strings",
    ],
)

cc_library(
    name = "hybrid_decrypt",
    hdrs = ["hybrid_decrypt.h"],
    include_prefix = "tink",
    visibility = ["//visibility:public"],
    deps = [
        "@com_google_absl//absl/status:statusor",
        "@com_google_absl//absl/strings",
    ],
)

cc_library(
    name = "hybrid_encrypt",
    hdrs = ["hybrid_encrypt.h"],
    include_prefix = "tink",
    visibility = ["//visibility:public"],
    deps = [
        "@com_google_absl//absl/status:statusor",
        "@com_google_absl//absl/strings",
    ],
)

cc_library(
    name = "mac",
    hdrs = ["mac.h"],
    include_prefix = "tink",
    visibility = ["//visibility:public"],
    deps = [
        "@com_google_absl//absl/status",
        "@com_google_absl//absl/status:statusor",
        "@com_google_absl//absl/strings",
    ],
)

cc_library(
    name = "public_key_sign",
    hdrs = ["public_key_sign.h"],
    include_prefix = "tink",
    visibility = ["//visibility:public"],
    deps = [
        "@com_google_absl//absl/status:statusor",
        "@com_google_absl//absl/strings",
    ],
)

cc_library(
    name = "public_key_verify",
    hdrs = ["public_key_verify.h"],
    include_prefix = "tink",
    visibility = ["//visibility:public"],
    deps = [
        "@com_google_absl//absl/status",
        "@com_google_absl//absl/strings",
    ],
)

cc_library(
    name = "keyset_reader",
    hdrs = ["keyset_reader.h"],
    include_prefix = "tink",
    visibility = ["//visibility:public"],
    deps = [
        "//proto:tink_cc_proto",
        "@com_google_absl//absl/status:statusor",
    ],
)

cc_library(
    name = "keyset_writer",
    hdrs = ["keyset_writer.h"],
    include_prefix = "tink",
    visibility = ["//visibility:public"],
    deps = [
        "//proto:tink_cc_proto",
        "@com_google_absl//absl/status",
    ],
)

cc_library(
    name = "binary_keyset_reader",
    srcs = ["core/binary_keyset_reader.cc"],
    hdrs = ["binary_keyset_reader.h"],
    include_prefix = "tink",
    visibility = ["//visibility:public"],
    deps = [
        ":keyset_reader",
        "//proto:tink_cc_proto",
        "//tink/util:errors",
        "//tink/util:status",
        "//tink/util:statusor",
        "@com_google_absl//absl/memory",
        "@com_google_absl//absl/status",
        "@com_google_absl//absl/status:statusor",
        "@com_google_absl//absl/strings",
    ],
)

cc_library(
    name = "binary_keyset_writer",
    srcs = ["core/binary_keyset_writer.cc"],
    hdrs = ["binary_keyset_writer.h"],
    include_prefix = "tink",
    visibility = ["//visibility:public"],
    deps = [
        ":keyset_writer",
        "//proto:tink_cc_proto",
        "//tink/util:protobuf_helper",
        "//tink/util:status",
        "//tink/util:statusor",
        "@com_google_absl//absl/memory",
        "@com_google_absl//absl/status",
        "@com_google_absl//absl/status:statusor",
        "@com_google_absl//absl/strings",
    ],
)

cc_library(
    name = "json_keyset_reader",
    hdrs = ["json_keyset_reader.h"],
    include_prefix = "tink",
    visibility = ["//visibility:public"],
    deps = ["//tink/json:json_keyset_reader"],
)

cc_library(
    name = "json_keyset_writer",
    hdrs = ["json_keyset_writer.h"],
    include_prefix = "tink",
    visibility = ["//visibility:public"],
    deps = ["//tink/json:json_keyset_writer"],
)

cc_library(
    name = "crypto_format",
    srcs = ["core/crypto_format.cc"],
    hdrs = ["crypto_format.h"],
    include_prefix = "tink",
    deps = [
        "//proto:tink_cc_proto",
        "//tink/internal:endian",
        "//tink/util:statusor",
        "@com_google_absl//absl/status",
        "@com_google_absl//absl/status:statusor",
        "@com_google_absl//absl/strings:string_view",
    ],
)

cc_library(
    name = "primitive_set",
    srcs = ["primitive_set.h"],
    hdrs = ["primitive_set.h"],
    include_prefix = "tink",
    deps = [
        ":crypto_format",
        "//proto:tink_cc_proto",
        "//tink/util:errors",
        "@com_google_absl//absl/base:core_headers",
        "@com_google_absl//absl/container:flat_hash_map",
        "@com_google_absl//absl/memory",
        "@com_google_absl//absl/status",
        "@com_google_absl//absl/status:statusor",
        "@com_google_absl//absl/strings:string_view",
        "@com_google_absl//absl/synchronization",
    ],
)

cc_library(
    name = "primitive_wrapper",
    hdrs = ["primitive_wrapper.h"],
    include_prefix = "tink",
    deps = [
        ":primitive_set",
        "@com_google_absl//absl/status:statusor",
    ],
)

cc_library(
    name = "registry",
    hdrs = ["registry.h"],
    include_prefix = "tink",
    deps = [
        ":key_manager",
        ":primitive_set",
        "//proto:tink_cc_proto",
        "//tink/internal:registry_impl",
        "@com_google_absl//absl/status",
        "@com_google_absl//absl/status:statusor",
        "@com_google_absl//absl/strings",
    ],
)

template_rule(
    name = "version_h",
    src = "version.h.templ",
    out = "version.h",
    substitutions = {
        "@TINK_VERSION_LABEL@": "%s" % TINK_VERSION_LABEL,
    },
)

cc_library(
    name = "version",
    srcs = ["core/version.cc"],
    hdrs = [":version_h"],
    include_prefix = "tink",
    visibility = ["//visibility:public"],
)

cc_library(
    name = "keyset_handle",
    srcs = [
        "core/keyset_handle.cc",
        "core/keyset_handle_builder.cc",
    ],
    hdrs = [
        "keyset_handle.h",
        "keyset_handle_builder.h",
    ],
    include_prefix = "tink",
    visibility = ["//visibility:public"],
    deps = [
        ":aead",
        ":configuration",
        ":insecure_secret_key_access",
        ":key",
        ":key_gen_configuration",
        ":key_manager",
        ":key_status",
        ":keyset_reader",
        ":keyset_writer",
        ":parameters",
        ":primitive_set",
        ":private_key",
        ":registry",
        ":restricted_data",
        ":secret_key_access_token",
        "//proto:tink_cc_proto",
        "//tink/config:global_registry",
        "//tink/internal:call_with_core_dump_protection",
        "//tink/internal:configuration_impl",
        "//tink/internal:key_gen_configuration_impl",
        "//tink/internal:key_info",
        "//tink/internal:key_status_util",
        "//tink/internal:key_type_info_store",
        "//tink/internal:keyset_handle_builder_entry",
        "//tink/internal:keyset_wrapper",
        "//tink/internal:keyset_wrapper_store",
        "//tink/internal:legacy_proto_key",
        "//tink/internal:mutable_serialization_registry",
        "//tink/internal:proto_key_serialization",
        "//tink/internal:registry_impl",
        "//tink/internal:serialization",
        "//tink/internal:tink_proto_structs",
        "//tink/internal:util",
        "//tink/subtle:random",
        "//tink/util:errors",
        "//tink/util:keyset_util",
        "//tink/util:secret_data",
        "//tink/util:secret_proto",
        "//tink/util:status",
        "//tink/util:statusor",
        "//tink/util:validation",
        "@com_google_absl//absl/base:core_headers",
        "@com_google_absl//absl/container:flat_hash_map",
        "@com_google_absl//absl/log:absl_check",
        "@com_google_absl//absl/log:check",
        "@com_google_absl//absl/memory",
        "@com_google_absl//absl/status",
        "@com_google_absl//absl/status:statusor",
        "@com_google_absl//absl/strings",
        "@com_google_absl//absl/strings:str_format",
        "@com_google_absl//absl/types:optional",
    ],
)

alias(
    name = "keyset_handle_builder",
    actual = ":keyset_handle",
    visibility = ["//visibility:public"],
)

cc_library(
    name = "cleartext_keyset_handle",
    srcs = ["core/cleartext_keyset_handle.cc"],
    hdrs = ["cleartext_keyset_handle.h"],
    include_prefix = "tink",
    visibility = ["//visibility:public"],
    deps = [
        ":keyset_handle",
        ":keyset_reader",
        ":keyset_writer",
        "//proto:tink_cc_proto",
        "//tink/util:errors",
        "//tink/util:secret_proto",
        "//tink/util:status",
        "//tink/util:statusor",
        "@com_google_absl//absl/container:flat_hash_map",
        "@com_google_absl//absl/memory",
        "@com_google_absl//absl/status",
        "@com_google_absl//absl/status:statusor",
    ],
)

cc_library(
    name = "key_manager",
    srcs = ["core/key_manager.cc"],
    hdrs = ["key_manager.h"],
    include_prefix = "tink",
    deps = [
        "//proto:tink_cc_proto",
        "//tink/util:errors",
        "//tink/util:protobuf_helper",
        "//tink/util:status",
        "//tink/util:statusor",
        "@com_google_absl//absl/memory",
        "@com_google_absl//absl/status",
        "@com_google_absl//absl/status:statusor",
        "@com_google_absl//absl/strings",
    ],
)

cc_library(
    name = "keyset_manager",
    srcs = ["core/keyset_manager.cc"],
    hdrs = ["keyset_manager.h"],
    include_prefix = "tink",
    visibility = ["//visibility:public"],
    deps = [
        ":key_gen_configuration",
        ":keyset_handle",
        "//proto:tink_cc_proto",
        "//tink/internal:key_gen_configuration_impl",
        "//tink/util:enums",
        "//tink/util:errors",
        "//tink/util:secret_proto",
        "//tink/util:status",
        "//tink/util:statusor",
        "@com_google_absl//absl/base:core_headers",
        "@com_google_absl//absl/memory",
        "@com_google_absl//absl/status",
        "@com_google_absl//absl/status:statusor",
        "@com_google_absl//absl/synchronization",
    ],
)

cc_library(
    name = "kms_client",
    hdrs = ["kms_client.h"],
    include_prefix = "tink",
    visibility = ["//visibility:public"],
    deps = [
        ":aead",
        "//tink/util:statusor",
        "@com_google_absl//absl/strings",
    ],
)

cc_library(
    name = "kms_clients",
    srcs = ["core/kms_clients.cc"],
    hdrs = ["kms_clients.h"],
    include_prefix = "tink",
    visibility = ["//visibility:public"],
    deps = [
        ":kms_client",
        "//tink/util:errors",
        "//tink/util:status",
        "//tink/util:statusor",
        "@com_google_absl//absl/base:core_headers",
        "@com_google_absl//absl/status",
        "@com_google_absl//absl/status:statusor",
        "@com_google_absl//absl/strings",
        "@com_google_absl//absl/synchronization",
    ],
)

cc_library(
    name = "core/template_util",
    hdrs = ["core/template_util.h"],
    include_prefix = "tink",
    deps = ["@com_google_absl//absl/meta:type_traits"],
)

cc_library(
    name = "core/key_type_manager",
    hdrs = ["core/key_type_manager.h"],
    include_prefix = "tink",
    deps = [
        ":core/template_util",
        ":input_stream",
        "//proto:tink_cc_proto",
        "//tink/internal:fips_utils",
        "//tink/util:status",
        "//tink/util:statusor",
        "@com_google_absl//absl/status",
        "@com_google_absl//absl/status:statusor",
        "@com_google_absl//absl/strings",
    ],
)

cc_library(
    name = "core/key_manager_impl",
    hdrs = ["core/key_manager_impl.h"],
    include_prefix = "tink",
    deps = [
        ":core/key_type_manager",
        ":core/template_util",
        ":input_stream",
        ":key_manager",
        "//proto:tink_cc_proto",
        "//tink/internal:call_with_core_dump_protection",
        "//tink/util:constants",
        "//tink/util:errors",
        "//tink/util:secret_proto",
        "//tink/util:status",
        "//tink/util:statusor",
        "@com_google_absl//absl/base",
        "@com_google_absl//absl/memory",
        "@com_google_absl//absl/status",
        "@com_google_absl//absl/status:statusor",
        "@com_google_absl//absl/strings",
    ],
)

cc_library(
    name = "core/private_key_type_manager",
    hdrs = ["core/private_key_type_manager.h"],
    include_prefix = "tink",
    deps = [
        ":core/key_type_manager",
        ":core/template_util",
        "//tink/util:statusor",
        "@com_google_absl//absl/status:statusor",
    ],
)

cc_library(
    name = "core/private_key_manager_impl",
    hdrs = ["core/private_key_manager_impl.h"],
    include_prefix = "tink",
    deps = [
        ":core/key_manager_impl",
        ":core/key_type_manager",
        ":core/private_key_type_manager",
        ":key_manager",
        "//tink/internal:call_with_core_dump_protection",
        "//tink/util:secret_proto",
        "//tink/util:status",
        "//tink/util:statusor",
        "//tink/util:validation",
        "@com_google_absl//absl/memory",
        "@com_google_absl//absl/status",
        "@com_google_absl//absl/status:statusor",
        "@com_google_absl//absl/strings:string_view",
    ],
)

cc_library(
    name = "key_access",
    hdrs = ["key_access.h"],
    include_prefix = "tink",
)

cc_library(
    name = "secret_key_access",
    hdrs = ["secret_key_access.h"],
    include_prefix = "tink",
    deps = [":key_access"],
)

cc_library(
    name = "parameters",
    hdrs = ["parameters.h"],
    include_prefix = "tink",
)

cc_library(
    name = "key",
    hdrs = ["key.h"],
    include_prefix = "tink",
    deps = [
        ":parameters",
        "@com_google_absl//absl/types:optional",
    ],
)

cc_library(
    name = "private_key",
    hdrs = ["private_key.h"],
    include_prefix = "tink",
    deps = [":key"],
)

cc_library(
    name = "partial_key_access_token",
    hdrs = ["partial_key_access_token.h"],
    include_prefix = "tink",
    visibility = ["//visibility:public"],
)

cc_library(
    name = "partial_key_access",
    hdrs = ["partial_key_access.h"],
    include_prefix = "tink",
    visibility = ["//visibility:public"],
    deps = [":partial_key_access_token"],
)

cc_library(
    name = "secret_key_access_token",
    hdrs = ["secret_key_access_token.h"],
    include_prefix = "tink",
)

cc_library(
    name = "insecure_secret_key_access",
    hdrs = ["insecure_secret_key_access.h"],
    include_prefix = "tink",
    visibility = ["//visibility:public"],
    deps = [":secret_key_access_token"],
)

cc_library(
    name = "restricted_data",
    srcs = ["core/restricted_data.cc"],
    hdrs = ["restricted_data.h"],
    include_prefix = "tink",
    deps = [
        ":secret_key_access_token",
        "//tink/subtle:random",
        "//tink/util:secret_data",
        "@com_google_absl//absl/log:check",
        "@com_google_absl//absl/strings:string_view",
    ],
)

cc_library(
    name = "key_status",
    hdrs = ["key_status.h"],
    include_prefix = "tink",
    visibility = ["//visibility:public"],
)

cc_library(
    name = "configuration",
    hdrs = ["configuration.h"],
    include_prefix = "tink",
    visibility = ["//visibility:public"],
    deps = [
        "//tink/internal:configuration_helper",
        "//tink/internal:key_type_info_store",
        "//tink/internal:keyset_wrapper_store",
    ],
)

cc_library(
    name = "key_gen_configuration",
    hdrs = ["key_gen_configuration.h"],
    include_prefix = "tink",
    visibility = ["//visibility:public"],
    deps = [
        ":key",
        ":parameters",
        "//tink/internal:key_type_info_store",
        "@com_google_absl//absl/container:flat_hash_map",
        "@com_google_absl//absl/functional:any_invocable",
        "@com_google_absl//absl/status:statusor",
        "@com_google_absl//absl/types:optional",
    ],
)

cc_library(
    name = "big_integer",
    srcs = ["core/big_integer.cc"],
    hdrs = ["big_integer.h"],
    include_prefix = "tink",
    deps = [
        "@boringssl//:crypto",
        "@com_google_absl//absl/strings:string_view",
    ],
)

cc_library(
    name = "restricted_big_integer",
    srcs = ["core/restricted_big_integer.cc"],
    hdrs = ["restricted_big_integer.h"],
    include_prefix = "tink",
    deps = [
        ":secret_key_access_token",
        "//tink/internal:call_with_core_dump_protection",
        "//tink/util:secret_data",
        "@boringssl//:crypto",
        "@com_google_absl//absl/strings:string_view",
    ],
)

cc_library(
    name = "ec_point",
    hdrs = ["ec_point.h"],
    include_prefix = "tink",
    deps = [":big_integer"],
)

cc_library(
    name = "proto_parameters_format",
    srcs = ["core/proto_parameters_format.cc"],
    hdrs = ["proto_parameters_format.h"],
    include_prefix = "tink",
    visibility = ["//visibility:public"],
    deps = [
        ":parameters",
        "//tink/internal:legacy_proto_parameters",
        "//tink/internal:mutable_serialization_registry",
        "//tink/internal:proto_parameters_serialization",
        "//tink/internal:serialization",
        "//tink/internal:tink_proto_structs",
        "//tink/util:statusor",
        "@com_google_absl//absl/status",
        "@com_google_absl//absl/status:statusor",
        "@com_google_absl//absl/strings",
    ],
)

cc_library(
    name = "proto_keyset_format",
    srcs = ["core/proto_keyset_format.cc"],
    hdrs = ["proto_keyset_format.h"],
    include_prefix = "tink",
    visibility = ["//visibility:public"],
    deps = [
        ":aead",
        ":binary_keyset_reader",
        ":binary_keyset_writer",
        ":cleartext_keyset_handle",
        ":keyset_handle",
        ":keyset_reader",
        ":secret_data",
        ":secret_key_access_token",
        "//proto:tink_cc_proto",
        "//tink/internal:call_with_core_dump_protection",
        "//tink/internal:secret_buffer",
        "//tink/util:secret_data",
        "//tink/util:secret_proto",
        "//tink/util:status",
        "//tink/util:statusor",
        "@com_google_absl//absl/memory",
        "@com_google_absl//absl/status",
        "@com_google_absl//absl/status:statusor",
        "@com_google_absl//absl/strings",
    ],
)

# tests

cc_test(
    name = "version_test",
    size = "small",
    srcs = ["core/version_test.cc"],
    deps = [
        ":version",
        "//tink/internal:util",
        "@googletest//:gtest_main",
    ],
)

cc_test(
    name = "binary_keyset_reader_test",
    size = "small",
    srcs = ["core/binary_keyset_reader_test.cc"],
    deps = [
        ":binary_keyset_reader",
        "//proto:tink_cc_proto",
        "//tink/util:test_util",
        "@com_google_absl//absl/status",
        "@googletest//:gtest_main",
    ],
)

cc_test(
    name = "binary_keyset_writer_test",
    size = "small",
    srcs = ["core/binary_keyset_writer_test.cc"],
    deps = [
        ":aead",
        ":binary_keyset_writer",
        ":insecure_secret_key_access_testonly",
        ":keyset_handle",
        ":proto_keyset_format",
        "//proto:tink_cc_proto",
        "//tink/aead:aead_config",
        "//tink/aead:aead_key_templates",
        "//tink/config:global_registry",
        "//tink/util:secret_data",
        "//tink/util:statusor",
        "//tink/util:test_matchers",
        "//tink/util:test_util",
        "@com_google_absl//absl/memory",
        "@com_google_absl//absl/status",
        "@googletest//:gtest_main",
    ],
)

cc_test(
    name = "crypto_format_test",
    size = "small",
    srcs = ["core/crypto_format_test.cc"],
    deps = [
        ":crypto_format",
        "//proto:tink_cc_proto",
        "//tink/util:test_matchers",
        "@com_google_absl//absl/status",
        "@googletest//:gtest_main",
    ],
)

cc_test(
    name = "keyset_handle_test",
    size = "small",
    srcs = ["core/keyset_handle_test.cc"],
    deps = [
        ":aead",
        ":binary_keyset_reader",
        ":binary_keyset_writer",
        ":cleartext_keyset_handle_testonly",
        ":configuration",
        ":core/key_type_manager",
        ":core/template_util",
        ":input_stream",
        ":insecure_secret_key_access",
        ":key_gen_configuration",
        ":key_status",
        ":keyset_handle",
        ":keyset_handle_builder",
        ":keyset_reader",
        ":partial_key_access",
        ":primitive_set",
        ":primitive_wrapper",
        ":registry",
        ":restricted_data",
        "//proto:aes_gcm_cc_proto",
        "//proto:aes_gcm_siv_cc_proto",
        "//proto:ecdsa_cc_proto",
        "//proto:tink_cc_proto",
        "//tink/aead:aead_config",
        "//tink/aead:aead_key_templates",
        "//tink/aead:aead_wrapper",
        "//tink/aead:aes_gcm_key_manager",
        "//tink/aead:aes_gcm_parameters",
        "//tink/aead:xchacha20_poly1305_key",
        "//tink/aead:xchacha20_poly1305_parameters",
        "//tink/aead/internal:key_gen_config_v0",
        "//tink/config:fips_140_2",
        "//tink/config:global_registry",
        "//tink/config:key_gen_fips_140_2",
        "//tink/config:tink_config",
        "//tink/internal:configuration_impl",
        "//tink/internal:fips_utils",
        "//tink/internal:key_gen_configuration_impl",
        "//tink/internal:mutable_serialization_registry",
        "//tink/internal:ssl_util",
        "//tink/signature:ecdsa_proto_serialization",
        "//tink/signature:ecdsa_sign_key_manager",
        "//tink/signature:ecdsa_verify_key_manager",
        "//tink/signature:signature_key_templates",
        "//tink/subtle:random",
        "//tink/subtle:xchacha20_poly1305_boringssl",
        "//tink/util:status",
        "//tink/util:statusor",
        "//tink/util:test_keyset_handle",
        "//tink/util:test_matchers",
        "//tink/util:test_util",
        "@com_google_absl//absl/container:flat_hash_map",
        "@com_google_absl//absl/log:absl_check",
        "@com_google_absl//absl/memory",
        "@com_google_absl//absl/status",
        "@com_google_absl//absl/strings",
        "@com_google_absl//absl/types:optional",
        "@googletest//:gtest_main",
    ],
)

cc_test(
    name = "keyset_handle_builder_test",
    srcs = ["core/keyset_handle_builder_test.cc"],
    deps = [
        ":aead",
        ":core/key_type_manager",
        ":core/template_util",
        ":input_stream",
        ":insecure_secret_key_access_testonly",
        ":key_gen_configuration",
        ":key_status",
        ":keyset_handle",
        ":keyset_handle_builder",
        ":mac",
        ":partial_key_access",
        ":primitive_set",
        ":primitive_wrapper",
        ":registry",
        ":restricted_data",
        "//proto:aes_cmac_cc_proto",
        "//proto:aes_gcm_cc_proto",
        "//proto:tink_cc_proto",
        "//tink/aead:aes_gcm_parameters",
        "//tink/aead:aes_gcm_siv_key",
        "//tink/aead:aes_gcm_siv_key_manager",
        "//tink/aead:aes_gcm_siv_parameters",
        "//tink/aead:xchacha20_poly1305_key",
        "//tink/aead:xchacha20_poly1305_key_manager",
        "//tink/aead:xchacha20_poly1305_parameters",
        "//tink/config:global_registry",
        "//tink/config:tink_config",
        "//tink/internal:key_gen_configuration_impl",
        "//tink/internal:legacy_proto_key",
        "//tink/internal:legacy_proto_parameters",
        "//tink/internal:proto_key_serialization",
        "//tink/internal:proto_parameters_serialization",
        "//tink/internal:tink_proto_structs",
        "//tink/mac:aes_cmac_key",
        "//tink/mac:aes_cmac_parameters",
        "//tink/mac:mac_key_templates",
        "//tink/subtle:random",
        "//tink/util:test_matchers",
        "//tink/util:test_util",
        "@com_google_absl//absl/container:flat_hash_map",
        "@com_google_absl//absl/memory",
        "@com_google_absl//absl/status",
        "@com_google_absl//absl/status:statusor",
        "@com_google_absl//absl/strings",
        "@com_google_absl//absl/types:optional",
        "@googletest//:gtest_main",
    ],
)

cc_test(
    name = "key_manager_test",
    size = "small",
    srcs = ["core/key_manager_test.cc"],
    deps = [
        ":key_manager",
        "//proto:empty_cc_proto",
        "//tink/util:status",
        "//tink/util:test_matchers",
        "@com_google_absl//absl/status",
        "@googletest//:gtest_main",
    ],
)

cc_test(
    name = "keyset_manager_test",
    size = "small",
    srcs = ["core/keyset_manager_test.cc"],
    deps = [
        ":keyset_handle",
        ":keyset_manager",
        "//proto:aes_gcm_cc_proto",
        "//proto:tink_cc_proto",
        "//tink/aead:aead_config",
        "//tink/aead:aes_gcm_key_manager",
        "//tink/util:test_keyset_handle",
        "@com_google_absl//absl/status",
        "@googletest//:gtest_main",
    ],
)

cc_test(
    name = "cleartext_keyset_handle_test",
    size = "small",
    srcs = ["core/cleartext_keyset_handle_test.cc"],
    deps = [
        ":binary_keyset_reader",
        ":cleartext_keyset_handle",
        ":keyset_handle",
        "//proto:tink_cc_proto",
        "//tink/util:status",
        "//tink/util:test_keyset_handle",
        "//tink/util:test_util",
        "@com_google_absl//absl/status",
        "@googletest//:gtest_main",
    ],
)

cc_test(
    name = "primitive_set_test",
    size = "small",
    srcs = ["core/primitive_set_test.cc"],
    deps = [
        ":crypto_format",
        ":mac",
        ":primitive_set",
        "//proto:tink_cc_proto",
        "//tink/keyderivation:keyset_deriver",
        "//tink/util:test_matchers",
        "//tink/util:test_util",
        "@com_google_absl//absl/memory",
        "@com_google_absl//absl/status",
        "@com_google_absl//absl/strings",
        "@com_google_absl//absl/strings:string_view",
        "@googletest//:gtest_main",
    ],
)

cc_test(
    name = "kms_clients_test",
    size = "small",
    srcs = ["core/kms_clients_test.cc"],
    deps = [
        ":aead",
        ":kms_client",
        ":kms_clients",
        "//tink/util:status",
        "//tink/util:statusor",
        "//tink/util:test_matchers",
        "//tink/util:test_util",
        "@com_google_absl//absl/status",
        "@com_google_absl//absl/strings",
        "@googletest//:gtest_main",
    ],
)

cc_test(
    name = "core/template_util_test",
    srcs = ["core/template_util_test.cc"],
    deps = [
        ":core/template_util",
        "@googletest//:gtest_main",
    ],
)

cc_test(
    name = "core/key_type_manager_test",
    srcs = ["core/key_type_manager_test.cc"],
    deps = [
        ":aead",
        ":core/key_type_manager",
        ":core/template_util",
        "//proto:aes_gcm_cc_proto",
        "//tink/subtle",
        "//tink/util:secret_data",
        "//tink/util:status",
        "//tink/util:statusor",
        "//tink/util:test_matchers",
        "//tink/util:validation",
        "@com_google_absl//absl/memory",
        "@com_google_absl//absl/status",
        "@com_google_absl//absl/strings:string_view",
        "@googletest//:gtest_main",
    ],
)

cc_test(
    name = "core/key_manager_impl_test",
    srcs = ["core/key_manager_impl_test.cc"],
    deps = [
        ":aead",
        ":core/key_manager_impl",
        "//proto:aes_gcm_cc_proto",
        "//tink/subtle",
        "//tink/util:input_stream_util",
        "//tink/util:istream_input_stream",
        "//tink/util:secret_data",
        "//tink/util:status",
        "//tink/util:statusor",
        "//tink/util:test_matchers",
        "//tink/util:test_util",
        "//tink/util:validation",
        "@com_google_absl//absl/status",
        "@com_google_absl//absl/strings:string_view",
        "@googletest//:gtest_main",
    ],
)

cc_test(
    name = "core/private_key_manager_impl_test",
    srcs = ["core/private_key_manager_impl_test.cc"],
    deps = [
        ":core/key_manager_impl",
        ":core/key_type_manager",
        ":core/private_key_manager_impl",
        ":core/private_key_type_manager",
        ":core/template_util",
        ":key_manager",
        ":registry",
        "//proto:ecdsa_cc_proto",
        "//tink/subtle:aes_gcm_boringssl",
        "//tink/subtle:random",
        "//tink/util:status",
        "//tink/util:statusor",
        "//tink/util:test_matchers",
        "//tink/util:test_util",
        "//tink/util:validation",
        "@com_google_absl//absl/memory",
        "@com_google_absl//absl/status",
        "@googletest//:gtest_main",
    ],
)

cc_test(
    name = "core/key_access_test",
    srcs = ["core/key_access_test.cc"],
    deps = [
        ":key_access",
        ":secret_key_access_testonly",
        "@googletest//:gtest_main",
    ],
)

cc_test(
    name = "core/partial_key_access_token_test",
    srcs = ["core/partial_key_access_token_test.cc"],
    deps = [
        ":partial_key_access",
        ":partial_key_access_token",
        "@com_google_absl//absl/base:core_headers",
        "@googletest//:gtest_main",
    ],
)

cc_test(
    name = "core/restricted_data_test",
    srcs = ["core/restricted_data_test.cc"],
    deps = [
        ":insecure_secret_key_access_testonly",
        ":restricted_data",
        "//tink/subtle:random",
        "@googletest//:gtest_main",
    ],
)

cc_test(
    name = "proto_keyset_format_test",
    srcs = ["core/proto_keyset_format_test.cc"],
    deps = [
        ":aead",
        ":binary_keyset_reader",
        ":binary_keyset_writer",
        ":insecure_secret_key_access_testonly",
        ":key_status",
        ":keyset_handle",
        ":keyset_handle_builder",
        ":keyset_reader",
        ":mac",
        ":proto_keyset_format",
        ":secret_data",
        "//tink/aead:aes_gcm_parameters",
        "//tink/config:global_registry",
        "//tink/config:tink_config",
        "//tink/mac:aes_cmac_parameters",
        "//tink/signature:ed25519_parameters",
        "//tink/util:secret_data",
        "//tink/util:test_matchers",
        "//tink/util:test_util",
        "@com_google_absl//absl/memory",
        "@com_google_absl//absl/status:statusor",
        "@googletest//:gtest_main",
    ],
)

cc_test(
    name = "core/big_integer_test",
    srcs = ["core/big_integer_test.cc"],
    deps = [
        ":big_integer",
        "//tink/util:test_util",
        "@com_google_absl//absl/strings:string_view",
        "@googletest//:gtest_main",
    ],
)

cc_test(
    name = "core/restricted_big_integer_test",
    srcs = ["core/restricted_big_integer_test.cc"],
    deps = [
        ":insecure_secret_key_access_testonly",
        ":restricted_big_integer",
        "//tink/util:secret_data",
        "//tink/util:test_util",
        "@com_google_absl//absl/strings:string_view",
        "@googletest//:gtest_main",
    ],
)

cc_test(
    name = "core/ec_point_test",
    srcs = ["core/ec_point_test.cc"],
    deps = [
        ":big_integer",
        ":ec_point",
        "//tink/subtle:random",
        "@googletest//:gtest_main",
    ],
)

cc_test(
    name = "proto_parameters_format_test",
    srcs = ["core/proto_parameters_format_test.cc"],
    deps = [
        ":parameters",
        ":proto_parameters_format",
        "//proto:aes_cmac_cc_proto",
        "//proto:tink_cc_proto",
        "//tink/internal:legacy_proto_parameters",
        "//tink/internal:proto_parameters_serialization",
        "//tink/mac:aes_cmac_parameters",
        "//tink/mac:aes_cmac_proto_serialization",
        "//tink/util:statusor",
        "//tink/util:test_matchers",
        "@com_google_absl//absl/status",
        "@googletest//:gtest_main",
    ],
)

cc_library(
    name = "secret_data",
    hdrs = ["secret_data.h"],
    include_prefix = "tink",
    visibility = ["//visibility:public"],
    deps = [
        "//tink/internal:sanitizing_allocator",
        "//tink/util:secret_data_internal_class",
    ],
)

cc_test(
    name = "secret_data_test",
    srcs = ["secret_data_test.cc"],
    deps = [
        ":secret_data",
        "//tink/internal:secret_buffer",
        "//tink/util:secret_data",
        "@com_google_absl//absl/strings:string_view",
        "@com_google_benchmark//:benchmark_main",
        "@googletest//:gtest_main",
    ],
)
